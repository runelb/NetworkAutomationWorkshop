---
- name: Collect IP addresses from webservers
  hosts: webservers
  gather_facts: yes
  tags: haproxy
  tasks:
    - name: Show IPs of webservers, gathering facts for devHAproxy
      debug:
        var: hostvars[inventory_hostname]['ansible_default_ipv4']['address']

- name: Deploy HAproxy
  hosts: devhaproxy
  gather_facts: no
  become: yes
  tags: haproxy
  tasks:
    - name: Install/update HAproxy
      apt:
        name: haproxy
        update_cache: yes
        state: latest
      # package:
      #   name: haproxy
      #   state: present
    
    # - name: Start HAProxy # HAproxy starts by the install command already
    #   service:
    #     name: haproxy
    #     state: started
    #     enabled: yes

    - name: Copy HAproxy configuration
      copy:
        src: haproxy.cfg
        dest: /etc/haproxy/haproxy.cfg

    # - name: Server A
    #   debug: var=hostvars['devA']['ansible_all_ipv4_addresses']

    # - name: Server B
    #   debug: var=hostvars['devB']['ansible_all_ipv4_addresses']

    # - name: Server C
    #   debug: var=hostvars['devC']['ansible_all_ipv4_addresses']

    - name: Write the webservers private IP addresses in haproxy config
      lineinfile:
        path: /etc/haproxy/haproxy.cfg
        regexp: '^        server devA address:80'
        line: "        server devA {{ hostvars['devA']['ansible_all_ipv4_addresses'] | join('') }}:80 check"
        state: present

    - name: Write the webservers private IP addresses in haproxy config
      lineinfile:
        path: /etc/haproxy/haproxy.cfg
        regexp: '^        server devB address:80'
        line: "        server devB {{ hostvars['devB']['ansible_all_ipv4_addresses'] | join('') }}:80 check"
        state: present

    - name: Write the webservers private IP addresses in haproxy config
      lineinfile:
        path: /etc/haproxy/haproxy.cfg
        regexp: '^        server devC address:80'
        line: "        server devC {{ hostvars['devC']['ansible_all_ipv4_addresses'] | join('') }}:80 check"
        state: present

    # - name: Start HAproxy # HAproxy starts by the install command already
    #   service:
    #     name: haproxy
    #     state: started
    #     enabled: yes

    - name: Restart HAproxy
      service:
        name: haproxy
        state: restarted

- name: Deploy NginX and PHP
  hosts: webservers
  gather_facts: no
  become: yes
  tags: webservers
  tasks:
    - name: Install/update NginX
      apt:
        name: nginx
        update_cache: yes
        state: latest
      # package:
      #   name: nginx
      #   state: present

    - name: Start NginX
      service:
        name: nginx
        state: started
        enabled: yes
    
    - name: Install/update PHP
      apt:
        name: php7.4-cli
        update_cache: yes
        state: latest

    - name: Install/update PHP-fpm
      apt:
        name: php7.4-fpm
        update_cache: yes
        state: latest
      # package:
      #   name: php7.4-fpm
      #   state: present
      
    - name: Start PHP
      service:
        name: php7.4-fpm
        state: started
        enabled: yes

    - name: Copy NginX site configuration
      copy:
        src: nginx.conf
        dest: /etc/nginx/sites-enabled/default

    - name: Copy PHP application
      copy:
        src: index.php
        dest: /var/www/html/index.php

    # restart PHP before nginx, could cause a problem otherwise
    - name: Restart PHP
      service:
        name: php7.4-fpm
        state: restarted
    
    - name: Restart NginX server
      service:
        name: nginx
        state: restarted

    # likely not necessary, wait time is probably very quick
    - name: Wait for server to start
      wait_for:
        port: 80

# testing
- name: Finding the IP of devHAproxy for testing
  hosts: devhaproxy   # devhaproxy or bastion sends a request to public IP of devhaproxy
  gather_facts: yes
  become: yes
  tags: testing
  tasks:
    - name: Discover the public IP of devHAproxy (Ansible goes trhough the bastion, and only knows devHAproxy's private IP address)
      uri:
        url: https://api.ipify.org?format=json
        return_content: yes
      register: ip_response
    
    # - name: Print IP
    #   debug:
    #     msg: "{{ ip_response.json.ip }}"
    
    - name: Store IP address
      set_fact:
        devhaproxy_ip: "{{ ip_response.json.ip }}"

- name: Testing
  hosts: localhost
  gather_facts: yes
  tags: testing
  tasks:
    # - name: Print devHAproxy's IP, but on localhost this time
    #   debug: var=hostvars['devhaproxy']['devhaproxy_ip']
        
    - name: Save devHAproxy's public IP address on localhost
      # # quote filter to avoid injection, devhaproxy's ip comes from outside
      shell: echo {{ hostvars['devhaproxy']['devhaproxy_ip'] | quote }}
      register: devhaproxy_ip

    - name: Double check the devhaproxy_ip variable is a valid IPv4 address
      debug:
        msg: "{{ devhaproxy_ip.stdout }}  Looks like an IP address"
      when:
        - devhaproxy_ip.stdout.split(".") | length == 4
        - devhaproxy_ip.stdout.split(".")[0] | int < 256
        - devhaproxy_ip.stdout.split(".")[1] | int < 256
        - devhaproxy_ip.stdout.split(".")[2] | int < 256
        - devhaproxy_ip.stdout.split(".")[3] | int < 256

    # - name: Ping request
    #   # # quote filter to avoid injection, devhaproxy's ip comes from outside
    #   shell: ping -c 4 {{ devhaproxy_ip.stdout | quote }}
    #   register: ping_out
    
    # - name: result
    #   debug: msg="{{ ping_out.stdout_lines }}"

    - name: First GET request
      # # quote filter to avoid injection, devhaproxy's ip comes from outside
      shell: curl {{ devhaproxy_ip.stdout | quote }}
      args:
        warn: no
      register: devA_output
    
    - name: First webserver reply!
      debug:
        var: devA_output.stdout

    - name: Second GET request
      # # quote filter to avoid injection, devhaproxy's ip comes from outside
      shell: curl {{ devhaproxy_ip.stdout | quote }}
      args:
        warn: no
      register: devB_output
    
    - name: Second webserver reply!
      debug:
        var: devB_output.stdout

    - name: Third GET request
      # # quote filter to avoid injection, devhaproxy's ip comes from outside
      shell: curl {{ devhaproxy_ip.stdout | quote }}
      args:
        warn: no
      register: devC_output
    
    - name: Third webserver reply!
      debug:
        var: devC_output.stdout
